# Generated by Django 5.1.3 on 2024-11-23 12:25


from django.db import migrations


def create_initial_tags(apps, schema_editor):
    Tag = apps.get_model('object_finder', 'Tag')
    initial_tags = [
        # Add 100 unique tag names
        'music', 'instrument', 'computer', 'concert area', 'gift',
        'art', 'book', 'fashion', 'technology', 'sport',
        'food', 'travel', 'photography', 'education', 'health',
        'fitness', 'nature', 'science', 'history', 'entertainment',
        'news', 'gaming', 'lifestyle', 'business', 'finance',
        'politics', 'culture', 'design', 'architecture', 'automotive',
        'pets', 'relationships', 'spirituality', 'environment', 'law',
        'real estate', 'marketing', 'programming', 'engineering', 'math',
        'language', 'psychology', 'philosophy', 'religion', 'comedy',
        'movies', 'television', 'music festival', 'dance', 'theater',
        'cooking', 'recipes', 'crafts', 'diy', 'home improvement',
        'gardening', 'parenting', 'kids', 'shopping', 'discounts',
        'sales', 'beauty', 'skincare', 'hair', 'makeup',
        'jewelry', 'watches', 'shoes', 'bags', 'accessories',
        'software', 'hardware', 'gadgets', 'apps', 'cloud computing',
        'networking', 'security', 'artificial intelligence', 'machine learning', 'data science',
        'robotics', 'space', 'astronomy', 'astrology', 'weather',
        'ocean', 'mountains', 'beaches', 'cities', 'villages',
        'adventure', 'extreme sports', 'meditation', 'yoga', 'nutrition',
        'animals', 'wildlife', 'volunteering', 'charity', 'non-profit',
    ]
    Tag.objects.bulk_create([Tag(name=name) for name in initial_tags])


def create_initial_attributes(apps, schema_editor):
    AttributeName = apps.get_model('object_finder', 'AttributeName')
    AttributeValue = apps.get_model('object_finder', 'AttributeValue')

    # Static attribute names
    attribute_names = ['year', 'size', 'material', 'color', 'brand']
    attribute_name_objs = {}
    for name in attribute_names:
        obj = AttributeName.objects.create(name=name)
        attribute_name_objs[name] = obj

    attribute_values = []

    # Attribute values for 'year' (e.g., 1980-2020)
    year_values = [str(year) for year in range(1980, 2021)]
    attribute_values.extend([
        AttributeValue(attribute_name=attribute_name_objs['year'], value=year)
        for year in year_values
    ])

    # Attribute values for 'size'
    size_values = ['XS', 'S', 'M', 'L', 'XL', 'XXL']
    attribute_values.extend([
        AttributeValue(attribute_name=attribute_name_objs['size'], value=size)
        for size in size_values
    ])

    # Attribute values for 'material'
    material_values = ['Wood', 'Metal',
                       'Plastic', 'Glass', 'Fabric', 'Leather']
    attribute_values.extend([
        AttributeValue(
            attribute_name=attribute_name_objs['material'], value=material)
        for material in material_values
    ])

    # Attribute values for 'color'
    color_values = ['Red', 'Blue', 'Green', 'Yellow',
                    'Black', 'White', 'Purple', 'Orange', 'Pink', 'Brown']
    attribute_values.extend([
        AttributeValue(
            attribute_name=attribute_name_objs['color'], value=color)
        for color in color_values
    ])

    # Attribute values for 'brand'
    brand_values = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E']
    attribute_values.extend([
        AttributeValue(
            attribute_name=attribute_name_objs['brand'], value=brand)
        for brand in brand_values
    ])

    # Ensure total attribute values reach 100
    total_values_needed = 100
    current_total = len(attribute_values)
    if current_total < total_values_needed:
        # Add additional dummy attribute values
        extra_values = total_values_needed - current_total
        for i in range(extra_values):
            attribute_values.append(
                AttributeValue(
                    attribute_name=attribute_name_objs['brand'],
                    value=f'Brand {chr(70 + i)}'  # Brand F, Brand G, etc.
                )
            )

    AttributeValue.objects.bulk_create(attribute_values)


class Migration(migrations.Migration):

    dependencies = [
        ('object_finder', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_initial_tags),
        migrations.RunPython(create_initial_attributes),
    ]

